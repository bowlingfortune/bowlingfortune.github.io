(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))o(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function n(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(t){if(t.ep)return;t.ep=!0;const r=n(t);fetch(t.href,r)}})();const P=new Set([" ","	",",",";"]),v=new Set("0123456789-".split("")),E=new Set("0123456789-X/".split(""));function I(e){return P.has(e)}function g(e){const{line:s}=e;for(;e.index<s.length&&I(s[e.index]);)e.index+=1;if(e.index>=s.length)return null;const n=e.index+1,o=s[e.index].toUpperCase();return e.index+=1,{char:o,column:n}}function k(e){if(e==="X")return 10;if(e==="-")return 0;const s=Number.parseInt(e,10);if(Number.isNaN(s))throw new Error(`Invalid roll symbol '${e}'`);if(s<0||s>9)throw new Error(`Invalid roll value '${e}'`);return s}function C(e){return e==="X"||v.has(e)}function x(e){return E.has(e)}function f(e,s,n){return{symbol:e,value:s,column:n}}function q(e){const s=[],n={line:e,index:0},o=()=>{for(;n.index<e.length&&I(e[n.index]);)n.index+=1};for(let r=0;r<9;r+=1){if(o(),n.index>=e.length)return{kind:"error",message:`Expected frame ${r+1}, but the line ended early`,column:e.length+1};const i=g(n);if(!i)return{kind:"error",message:`Expected frame ${r+1}, but found nothing`,column:e.length+1};const{char:a,column:c}=i;if(!C(a))return{kind:"error",message:`Invalid roll '${a}' in frame ${r+1}`,column:c};if(a==="X"){s.push({rolls:[f("X",10,c)],isStrike:!0,isSpare:!1});continue}const u=k(a),h=g(n);if(!h)return{kind:"error",message:`Frame ${r+1} is missing a second roll`,column:e.length+1};const{char:m,column:l}=h;if(m==="X")return{kind:"error",message:`Strike symbol not allowed in second roll of frame ${r+1}`,column:l};if(m==="/"){if(u>=10)return{kind:"error",message:`Spare in frame ${r+1} requires the first roll to be less than 10`,column:l};const y=10-u;s.push({rolls:[f(a,u,c),f("/",y,l)],isStrike:!1,isSpare:!0});continue}if(!v.has(m))return{kind:"error",message:`Invalid roll '${m}' in frame ${r+1}`,column:l};const d=k(m);if(u+d>10)return{kind:"error",message:`Pins knocked down exceed 10 in frame ${r+1}`,column:l};s.push({rolls:[f(a,u,c),f(m,d,l)],isStrike:!1,isSpare:!1})}if(o(),n.index>=e.length)return{kind:"error",message:"Frame 10 is missing",column:e.length+1};const t=T(n,e);return t.kind==="error"?t:(s.push(t.frame),o(),n.index<e.length?{kind:"error",message:"Too many rolls provided. Expected exactly 10 frames.",column:n.index+1}:{kind:"success",frames:s})}function T(e,s){const n=g(e);if(!n)return{kind:"error",message:"Frame 10 is missing",column:s.length+1};const{char:o,column:t}=n;if(!C(o))return{kind:"error",message:`Invalid roll '${o}' in frame 10`,column:t};if(o==="X")return N(e,t);const r=k(o),i=g(e);if(!i)return{kind:"error",message:"Frame 10 is missing a second roll",column:s.length+1};const{char:a,column:c}=i;if(a==="X")return{kind:"error",message:"Strike symbol not allowed as the second roll unless the first was a strike",column:c};if(a==="/"){if(r>=10)return{kind:"error",message:"Spare in frame 10 requires the first roll to be less than 10",column:c};const h=10-r,m=g(e);if(!m)return{kind:"error",message:"A bonus ball is required after a spare in frame 10",column:s.length+1};const{char:l,column:d}=m;if(l==="/")return{kind:"error",message:"Spare symbol cannot be used for the fill ball after a spare",column:d};if(!x(l))return{kind:"error",message:`Invalid fill ball '${l}' in frame 10`,column:d};const y=l==="X"?10:k(l);return{kind:"success",frame:{rolls:[f(o,r,t),f("/",h,c),f(l,y,d)],isStrike:!1,isSpare:!0}}}if(!v.has(a))return{kind:"error",message:`Invalid roll '${a}' in frame 10`,column:c};const u=k(a);return r+u>10?{kind:"error",message:"Pins knocked down exceed 10 in frame 10",column:c}:{kind:"success",frame:{rolls:[f(o,r,t),f(a,u,c)],isStrike:!1,isSpare:!1}}}function N(e,s){const n=g(e);if(!n)return{kind:"error",message:"A strike in frame 10 requires two additional rolls",column:s};const{char:o,column:t}=n;if(!x(o)||o==="/")return{kind:"error",message:"Invalid second roll after a strike in frame 10",column:t};let r;o==="X"?r=10:r=k(o);const i=g(e);if(!i)return{kind:"error",message:"A strike in frame 10 requires two additional rolls",column:t};const{char:a,column:c}=i;if(!x(a))return{kind:"error",message:`Invalid fill ball '${a}' in frame 10`,column:c};let u;if(a==="X")u=10;else if(a==="/"){if(o==="X")return{kind:"error",message:"Spare symbol cannot follow a strike in the second roll of frame 10",column:c};if(r>=10)return{kind:"error",message:"Spare symbol invalid because there are no pins remaining",column:c};u=10-r}else if(u=k(a),o!=="X"&&r+u>10)return{kind:"error",message:"Pins knocked down exceed the remaining pins in frame 10",column:c};return{kind:"success",frame:{rolls:[f("X",10,s),f(o,r,t),f(a,u,c)],isStrike:!0,isSpare:!1}}}function M(e){const s=[],n=[],o=[];for(const i of e){for(const a of i.rolls)s.push(a.value);n.push(i.isStrike),o.push(i.isSpare)}let t=0,r=0;for(let i=0;i<10;i+=1)n[i]?(t+=10+(s[r+1]??0)+(s[r+2]??0),r+=1):o[i]?(t+=10+(s[r+2]??0),r+=2):(t+=(s[r]??0)+(s[r+1]??0),r+=2);return t}function V(e){if(e.length!==10)throw new Error("Expected exactly 10 frames");const s=e.slice(0,9),n=e[9],o=[];function t(r,i){if(i===1){o.push([...r,n]);return}for(let a=0;a<i;a++)t(r,i-1),i%2===0?[r[a],r[i-1]]=[r[i-1],r[a]]:[r[0],r[i-1]]=[r[i-1],r[0]]}return t(s,s.length),o}function A(e){const s=V(e),n=s.map(l=>M(l));n.sort((l,d)=>l-d);const o=n[0],t=n[n.length-1],i=n.reduce((l,d)=>l+d,0)/n.length,a=Math.floor(n.length/2),c=n.length%2===0?(n[a-1]+n[a])/2:n[a],u=new Map;for(const l of n)u.set(l,(u.get(l)||0)+1);let h=0;for(const l of u.values())l>h&&(h=l);const m=[];for(const[l,d]of u)d===h&&m.push(l);return m.sort((l,d)=>l-d),{min:o,max:t,mean:Math.round(i*100)/100,median:c,mode:m,permutationCount:s.length}}const F=["Tell My Bowling Fortune","Glimpse Into My Future.. er, Past","Peer Into the Multiverse","Clutch Or Not?","My mom said I'm pretty good.","What oil pattern is this? Badger?"],O="Tell Me How Bad I Fucked Up",B=.001,X=document.querySelector("#app");if(!X)throw new Error("Failed to find app container");X.innerHTML=`
  <h1>Bowling Fortune Teller</h1>
  <label for="scores-input">Frame-by-Frame Score(s)</label>
  <textarea id="scores-input" name="Frame-by-Frame Score(s)" placeholder="9/ X 81 7/ X X 9- 90 X XX6" aria-describedby="scores-help" rows="15" cols="50"></textarea>
  <p id="scores-help" class="description">
    Enter frame-by-frame scores. Use spaces or commas to separate frames.<br />
    Enter one game per line.<br />
    Valid characters:<br />
    * 0-9<br />
    * /<br />
    * X<br />
    * - (counts the same as 0)
  </p>
  <button id="submit" type="button">Tell My Bowling Fortune</button>
  <div id="feedback" role="status" aria-live="polite"></div>
`;const p=document.querySelector("#scores-input"),S=document.querySelector("#submit"),b=document.querySelector("#feedback");if(!p||!S||!b)throw new Error("Failed to initialise UI elements");let w=0;function L(){if(Math.random()<B){S.textContent=O;return}S.textContent=F[w],w=(w+1)%F.length}L();setInterval(L,3e4);S.addEventListener("click",()=>{if(!p.value.trim()){$("Please provide at least one game.",1,1);return}const e=p.value.replace(/\r/g,"").split(`
`),s=[];for(let n=0;n<e.length;n+=1){const o=e[n];if(!o.trim()){$(`Game ${n+1} is empty. Each line must contain exactly ten frames.`,n+1,1);return}const t=q(o);if(t.kind==="error"){G(t,n,e);return}const r=M(t.frames),i=A(t.frames);s.push({frames:t.frames,score:r,stats:i})}H(s)});function G(e,s,n){const o=s+1,t=`Row ${o}, column ${e.column}: ${e.message}`,r=R(n,s,e.column);$(t,o,e.column,r)}function R(e,s,n){let o=0;for(let t=0;t<s;t+=1)o+=e[t].length+1;return o+(n-1)}function $(e,s,n,o){if(b.innerHTML="",b.className="error",b.textContent=e,p.focus(),typeof o=="number")p.setSelectionRange(o,o);else{const t=p.value.replace(/\r/g,"").split(`
`),r=R(t,s-1,n);p.setSelectionRange(r,r)}}function H(e){if(b.className="output",e.length===0){b.innerHTML="";return}const s=e.map((n,o)=>{const t=o+1,r=n.stats.mode.length===1?n.stats.mode[0].toString():`${n.stats.mode.join(", ")} (multimodal)`;return`
        <article class="result-card">
          <h2>Game ${t}</h2>
          <p><strong>Actual score:</strong> ${n.score}</p>
          <details>
            <summary>Frame Permutation Statistics</summary>
            <dl class="stats">
              <dt>Permutations analyzed:</dt>
              <dd>${n.stats.permutationCount.toLocaleString()}</dd>

              <dt>Minimum score:</dt>
              <dd>${n.stats.min}</dd>

              <dt>Maximum score:</dt>
              <dd>${n.stats.max}</dd>

              <dt>Mean score:</dt>
              <dd>${n.stats.mean}</dd>

              <dt>Median score:</dt>
              <dd>${n.stats.median}</dd>

              <dt>Mode:</dt>
              <dd>${r}</dd>
            </dl>
          </details>
        </article>
      `}).join("");b.innerHTML=`<section class="results">${s}</section>`}
